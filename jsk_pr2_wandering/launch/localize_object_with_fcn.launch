<launch>

  <arg name="GPU" default="1" />

  <!-- default variables is for PR2 -->
  <arg name="INPUT_IMAGE" />
  <arg name="INPUT_CLOUD" />
  <arg name="FIXED_FRAME" />
  <arg name="MANAGER" />
  <arg name="MACHINE" default="c2" />

  <arg name="FCN" />
  <arg name="PROCESSING" />

  <rosparam>
    target_names:
      - background
      - room73b2-hitachi-fiesta-refrigerator
      - room73b2-karimoku-table
      - room73b2-hrp2-parts-drawer
      - room73b2-door-left
      - room73b2-door-right
  </rosparam>

  <!-- Processing -->

  <group if="$(arg FCN)">
    <node name="fcn_object_segmentation"
          pkg="jsk_perception" type="fcn_object_segmentation.py">
      <remap from="~input" to="$(arg INPUT_IMAGE)" />
      <rosparam subst_value="true">
        gpu: $(arg GPU)
        model_name: fcn32s
        model_h5: $(find jsk_pr2_wandering)/trained_data/fcn32s_4900.chainermodel
      </rosparam>
      <remap from="~target_names" to="target_names" />
    </node>
  </group>

  <group if="$(arg PROCESSING)">
    <!-- label image -> largest target object mask -> point indices -> point cloud -> cluster indices by euclidean clustering -> boxes -->
    <node name="label_to_mask"
          pkg="nodelet" type="nodelet"
          args="load jsk_perception/LabelToMaskImage $(arg MANAGER)"
          machine="$(arg MACHINE)">
      <remap from="~input" to="fcn_object_segmentation/output" />
    </node>
    <!-- This fails in unknown environment:
         label image -> largest target object mask -> point indices -> cluster indices -> boxes
    <node name="bounding_object_mask"
          pkg="nodelet" type="nodelet"
          args="load jsk_perception/BoundingObjectMaskImage $(arg MANAGER)"
          machine="$(arg MACHINE)">
      <remap from="~input" to="label_to_mask/output" />
    </node>
    -->
    <node name="mask_to_point_indices"
          pkg="nodelet" type="nodelet"
          args="load jsk_pcl_utils/MaskImageToPointIndices $(arg MANAGER)"
          machine="$(arg MACHINE)">
      <!-- <remap from="~input" to="bounding_object_mask/output" /> -->
      <remap from="~input" to="label_to_mask/output" />
    </node>
    <node name="extract_indices"
          pkg="nodelet" type="nodelet"
          args="load jsk_pcl/ExtractIndices $(arg MANAGER)"
          machine="$(arg MACHINE)">
      <remap from="~input" to="$(arg INPUT_CLOUD)" />  <!-- depth timestamp -->
      <remap from="~indices" to="mask_to_point_indices/output" />  <!-- 2d timestamp -->
      <rosparam subst_value="true">
        approximate_sync: true
        queue_size: 300
        keep_organized: true
      </rosparam>
      <!-- ~output has depth timestamp -->
    </node>
    <node name="resize_points_publisher"
          pkg="nodelet" type="nodelet"
          args="load jsk_pcl/ResizePointsPublisher $(arg MANAGER)"
          machine="$(arg MACHINE)">
      <remap from="~input" to="extract_indices/output" />
      <param name="step_x" value="4" />
      <param name="step_y" value="4" />
    </node>
    <node name="euclidean_clustering"
          pkg="nodelet" type="nodelet"
          args="load jsk_pcl/EuclideanClustering $(arg MANAGER)"
          machine="$(arg MACHINE)">
      <remap from="~input" to="resize_points_publisher/output" />
      <rosparam subst_value="true">
        min_size: 10
        max_size: 25000
        tolerance: 0.1
      </rosparam>
      <!-- ~output has depth timestamp -->
    </node>
    <node name="cluster_indices_decomposer_target"
          pkg="nodelet" type="nodelet"
          args="load jsk_pcl/ClusterPointIndicesDecomposer $(arg MANAGER)"
          machine="$(arg MACHINE)">
      <remap from="~input" to="resize_points_publisher/output" />  <!-- depth timestamp -->
      <remap from="~target" to="euclidean_clustering/output" />  <!-- depth timestamp -->
      <rosparam subst_value="true">
        approximate_sync: false
        queue_size: 500
        align_boxes: true
        align_boxes_with_plane: false
        target_frame_id: $(arg FIXED_FRAME)
      </rosparam>
    </node>

    <!-- label image -> cluster indices -> boxes -->
    <node name="label_to_cluster_indices"
          pkg="nodelet" type="nodelet"
          args="load jsk_pcl_utils/LabelToClusterPointIndices $(arg MANAGER)"
          machine="$(arg MACHINE)">
      <remap from="~input" to="fcn_object_segmentation/output" />
    </node>
    <node name="cluster_indices_decomposer_all"
          pkg="nodelet" type="nodelet"
          args="load jsk_pcl/ClusterPointIndicesDecomposer $(arg MANAGER)"
          machine="$(arg MACHINE)">
      <remap from="~input" to="$(arg INPUT_CLOUD)" />
      <remap from="~target" to="label_to_cluster_indices/output" />
      <rosparam subst_value="true">
        approximate_sync: true
        queue_size: 1000
        align_boxes: true
        align_boxes_with_plane: false
        target_frame_id: $(arg FIXED_FRAME)
      </rosparam>
    </node>

    <!-- Visualization -->

    <node name="label_image_decomposer"
          pkg="jsk_perception" type="label_image_decomposer.py"
          machine="$(arg MACHINE)">
      <remap from="~input" to="$(arg INPUT_IMAGE)" />
      <remap from="~input/label" to="fcn_object_segmentation/output" />
      <rosparam>
        approximate_sync: false
        queue_size: 100
      </rosparam>
      <remap from="~label_names" to="target_names" />
    </node>
    <node name="colorize_labels"
          pkg="nodelet" type="nodelet"
          args="load jsk_perception/ColorizeLabels $(arg MANAGER)"
          machine="$(arg MACHINE)">
      <remap from="~input" to="fcn_object_segmentation/output" />
    </node>
  </group>

  <!-- GUI -->

  <!--
  <node name="image_view0"
        pkg="image_view" type="image_view">
    <remap from="image" to="$(arg INPUT_IMAGE)" />
  </node>
  <node name="image_view1"
        pkg="image_view" type="image_view">
    <remap from="image" to="fcn_object_segmentation/output" />
  </node>
  <node name="image_view2"
        pkg="image_view" type="image_view">
    <remap from="image" to="label_image_decomposer/output/label_viz" />
  </node>
  <node name="image_view3"
        pkg="image_view" type="image_view">
    <remap from="image" to="draw_rect_array/output" />
  </node>
  -->

</launch>
